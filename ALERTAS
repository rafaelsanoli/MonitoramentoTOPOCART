# Monitoramento de Bancos PostgreSQL com Prometheus para Empresa de Topografia

Este documento descreve um conjunto de **consultas importantes** e **alertas** para monitorar diversos bancos de dados PostgreSQL, incluindo bancos de dados geoespaciais grandes (PostGIS), comuns no mapeamento topográfico de grandes áreas.

---

## 1. Alertas para Bancos PostgreSQL Gerais

| Nº | Alerta                   | Consulta SQL (executada pelo exporter)                         | Métrica gerada                   | Exemplo de alerta Prometheus (PromQL)         |
|-----|--------------------------|----------------------------------------------------------------|---------------------------------|----------------------------------------------|
| 1   | Conexões simultâneas altas | `SELECT count(*) FROM pg_stat_activity;`                       | `pg_stat_activity_count`          | `pg_stat_activity_count > 200`                |
| 2   | Conexões por usuário altas | `SELECT usename, count(*) FROM pg_stat_activity GROUP BY usename;` | `pg_stat_activity_count{user=...}` | `pg_stat_activity_count{user="clienteA"} > 50` |
| 3   | Transações abertas muito longas | `SELECT max(extract(epoch FROM now() - xact_start)) FROM pg_stat_activity WHERE state='active' AND xact_start IS NOT NULL;` | `pg_stat_activity_max_tx_duration_seconds` | `pg_stat_activity_max_tx_duration_seconds > 30` |
| 4   | Queries longas executando   | `SELECT pid, query, extract(epoch FROM now() - query_start) AS duration FROM pg_stat_activity WHERE state='active' AND query_start IS NOT NULL;` | `pg_stat_activity_query_duration_seconds` | `pg_stat_activity_query_duration_seconds > 60` |
| 5   | Locks não concedidos (espera) | `SELECT count(*) FROM pg_locks WHERE granted = false;`          | `pg_locks_count{granted="false"}` | `pg_locks_count{granted="false"} > 0`          |
| 6   | Deadlocks detectados         | `SELECT sum(deadlocks) FROM pg_stat_database;`                  | `pg_stat_database_deadlocks`      | `increase(pg_stat_database_deadlocks[5m]) > 0`|
| 7   | Tuplas mortas acumuladas     | `SELECT relname, n_dead_tup FROM pg_stat_user_tables;`          | `pg_stat_user_tables_n_dead_tup`  | `pg_stat_user_tables_n_dead_tup > 100000`     |
| 8   | Autovacuum atrasado          | `SELECT relname, last_autovacuum FROM pg_stat_user_tables WHERE last_autovacuum IS NULL OR last_autovacuum < now() - interval '1 hour';` | Métrica customizada necessária    | Configurar alerta baseado em tempo desde último autovacuum |
| 9   | Falha de autenticação recente | Logs de autenticação (ex. via `pg_stat_activity` ou logs externos) | Não coberto pelo exporter padrão | Alertas via sistema externo                    |
| 10  | Checkpoints frequentes       | `SELECT checkpoints_timed, checkpoints_req FROM pg_stat_bgwriter;` | `pg_stat_bgwriter_checkpoints`    | Alertar se checkpoint > valor esperado        |
| 11  | Espaço total consumido pelo banco | `SELECT pg_database.datname, pg_database_size(datname) FROM pg_database;` | Métrica de tamanho do DB          | Alertar se tamanho ultrapassar limite definido |
| 12  | Número de índices inválidos  | `SELECT count(*) FROM pg_index WHERE indisvalid = false;`        | Métrica customizada necessária    | Alertar se índice inválido > 0                  |
| 13  | Queries mais lentas          | `SELECT query, mean_time FROM pg_stat_statements ORDER BY mean_time DESC LIMIT 5;` | `pg_stat_statements_mean_time`    | Alertar se tempo médio > limite                |
| 14  | Locks exclusivos (waiting)   | `SELECT count(*) FROM pg_locks WHERE mode = 'ExclusiveLock' AND granted = false;` | `pg_locks_exclusive_waiting`      | Alertar se > 0                                 |
| 15  | Tabelas sem índice primário  | `SELECT relname FROM pg_class WHERE relkind = 'r' AND relname NOT IN (SELECT tablename FROM pg_indexes WHERE indexname LIKE '%pkey%');` | Necessita query customizada        | Alertar se tabelas sem primary key             |

---

## 2. Alertas para Bancos PostGIS / Muito Grandes e com Alta Concorrência

| Nº | Alerta                     | Consulta SQL (exporter customizado)                            | Métrica gerada                   | Exemplo de alerta Prometheus (PromQL)         |
|-----|----------------------------|----------------------------------------------------------------|---------------------------------|----------------------------------------------|
| 1   | Tamanho das tabelas geoespaciais | `SELECT relname, pg_total_relation_size(relid) FROM pg_stat_user_tables WHERE relname LIKE 'geo_%';` | Métrica customizada `postgis_table_size_bytes` | Alertar se tamanho > limite definido          |
| 2   | Geometrias inválidas (ST_IsValid) | `SELECT count(*) FROM geo_ruas WHERE NOT ST_IsValid(geom);`    | Métrica customizada `postgis_invalid_geoms` | Alertar se > 0                                |
| 3   | Geometrias duplicadas        | `SELECT count(*) FROM (SELECT geom, count(*) FROM geo_ruas GROUP BY geom HAVING count(*) > 1) AS duplicates;` | Métrica customizada             | Alertar se duplicatas > 0                      |
| 4   | SRID não definido (0)        | `SELECT count(*) FROM geo_ruas WHERE ST_SRID(geom) = 0;`       | Métrica customizada             | Alertar se > 0                                |
| 5   | Índices espaciais faltando   | Query para verificar se índice GIST existe em col geom          | Métrica customizada             | Alertar se índice espacial faltando           |
| 6   | Consultas espaciais lentas (ST_*) | `SELECT query, mean_time FROM pg_stat_statements WHERE query LIKE '%ST_%' ORDER BY mean_time DESC LIMIT 5;` | Métrica customizada             | Alertar se mean_time > limite                   |
| 7   | Número de vértices em geometrias | `SELECT count(*) FROM geo_ruas WHERE ST_NPoints(geom) > 10000;` | Métrica customizada             | Alertar se > 0                                |
| 8   | Autovacuum atrasado em tabelas grandes | `SELECT relname, n_dead_tup FROM pg_stat_user_tables WHERE n_dead_tup > 100000;` | Métrica customizada             | Alertar se tuplas mortas > limite               |
| 9   | Tamanho do banco em disco (host) | Monitorar espaço via node_exporter                               | Métrica node_exporter disk      | Alertar se espaço em disco < 10%               |
| 10  | Deadlocks                   | Mesmo do geral                                                 | `pg_stat_database_deadlocks`      | Igual geral                                   |
| 11  | Locks esperando por exclusividade | `SELECT count(*) FROM pg_locks WHERE mode = 'ExclusiveLock' AND granted = false;` | `pg_locks_exclusive_waiting`      | Igual geral                                   |
| 12  | Diferença de SRID entre tabelas geoespaciais | `SELECT DISTINCT ST_SRID(geom) FROM geo_ruas;` (repetir p/ outras) | Métrica customizada             | Alertar se múltiplos SRIDs encontrados         |
| 13  | Geometrias vazias ou nulas   | `SELECT count(*) FROM geo_ruas WHERE geom IS NULL OR ST_IsEmpty(geom);` | Métrica customizada             | Alertar se > 0                                |
| 14  | Consultas concorrentes altas  | Monitorar `pg_stat_activity` para conexões altas                | `pg_stat_activity_count`         | Igual geral                                   |
| 15  | Transações longas no banco PostGIS | Mesmo que geral                                               | `pg_stat_activity_max_tx_duration_seconds` | Igual geral                                   |

---

## Uso

- Configure o `postgres_exporter` com queries customizadas para métricas não padrão (ex.: consultas espaciais).
- Configure o Prometheus com regras de alertas baseadas nos exemplos acima.
- Utilize Grafana para dashboards de visualização.
- Configure Alertmanager para enviar notificações via Discord, Telegram etc.

---
